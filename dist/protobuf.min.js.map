{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","protobuf.min.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/common.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light.js","../src/index-minimal.js","../src/index","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/parse.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/tokenize.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","protobuf","1","require","module","exports","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","2","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","Error","test","3","codegen","functionParams","functionName","body","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","Number","floor","JSON","stringify","functionNameOverride","4","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","5","fetch","asPromise","fs","inquire","filename","options","callback","xhr","readFile","contents","XMLHttpRequest","binary","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","7","6","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","8","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","9","alloc","size","SIZE","MAX","slab","call","10","utf8","len","read","write","c1","c2","11","common","timeType","commonRe","name","json","nested","google","Any","fields","type_url","type","id","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","FieldMask","paths","get","file","12","converter","Enum","util","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","fromObject","mtype","fieldsArray","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","valuesById","long","low","high","unsigned","bytes","arrayDefault","hasKs2","_fieldsArray","indexOf","15","37","13","filter","group","ref","types","defaults","basic","packed","rfield","required","missing","36","14","wireType","mapKey","genTypePartial","optional","ReflectionObject","create","constructor","className","Namespace","comment","comments","TypeError","reserved","fromJSON","enm","toJSON","toJSONOptions","keepComments","Boolean","add","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","23","24","16","Field","Type","ruleRe","extend","isObject","toLowerCase","message","defaultValue","extensionField","declaringField","_packed","defineProperty","getOption","setOption","ifNotSet","resolved","parent","lookupTypeOrEnum","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","17","build","load","root","Root","loadSync","encoder","decoder","verifier","OneOf","MapField","Service","Method","Message","wrappers","18","20","21","22","25","29","33","35","40","41","configure","Writer","BufferWriter","Reader","BufferReader","rpc","roots","27","28","30","31","39","42","43","19","tokenize","parse","26","34","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","requestType","requestStream","responseStream","parsedOptions","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","names","methods","getEnum","prev","setOptions","onAdd","onRemove","define","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","Enum_","defineProperties","unshift","_handleAdd","_handleRemove","setParsedOption","propName","opt","find","hasOwnProperty","newValue","setProperty","newOpt","Root_","fieldNames","addFieldsToParent","oneofName","oneOfGetter","set","oneOfSetter","keepCase","base10Re","base10NegRe","base16Re","base16NegRe","base8Re","base8NegRe","numberRe","nameRe","typeRefRe","fqTypeRefRe","pkg","imports","weakImports","syntax","token","preferTrailingComment","tn","alternateCommentMode","next","peek","skip","cmnt","head","isProto3","applyCase","camelCase","illegal","insideTryCatch","line","readString","readValue","acceptTypeRef","substring","parseInt","parseFloat","parseNumber","readRanges","target","acceptStrings","parseId","acceptNegative","parsePackage","parseImport","whichImports","parseSyntax","parseCommon","parseOption","ifBlock","valueType","parseInlineOptions","parseMapField","parseField","parseOneOf","extensions","parseType","dummy","parseEnumValue","parseEnum","service","commentText","method","parseMethod","parseService","reference","parseExtension","fnIf","fnElse","trailingLine","lcFirst","ucFirst","parseGroup","isCustom","option","substr","parseOptionValue","result","prevValue","concat","simpleValue","package","LongBits","indexOutOfRange","writeLength","RangeError","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","int64","toBigInt","uint64","sint64","zzDecode","fixed64","sfixed64","float","double","skipType","BufferReader_","utf8Slice","min","deferred","files","SYNC","resolvePath","self","sync","finish","cb","getBundledFileName","idx","lastIndexOf","altname","process","parsed","queued","weak","setTimeout","readFileSync","isNode","exposeRe","tryHandleExtension","extendedType","sisterField","parse_","common_","32","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","methodName","isReserved","m","q","s","delimRe","stringDoubleRe","stringSingleRe","setCommentRe","setCommentAltRe","setCommentSplitRe","whitespaceRe","unescapeRe","unescapeMap","0","r","unescape","str","commentType","commentLine","commentLineEmpty","commentIsLeading","stack","stringDelim","subject","setComment","isLeading","commentOffset","lines","trim","isDoubleSlashCommentLine","startOffset","endOffset","findEndOfLine","lineText","cursor","re","lastIndex","match","exec","repeat","curr","isDoc","isLeadingComment","expected","actual","ret","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","merge","ctorProperties","setup","wrapper","originalThis","fork","ldelim","typeName","bake","o","key","safePropBackslashRe","safePropQuoteRe","toUpperCase","camelCaseRe","a","decorateRoot","enumerable","decorateEnumIndex","dst","setProp","38","zero","zzEncode","TWO_32","fromBigInt","BigInt","negative","fromNumber","from","mask","part0","part1","part2","src","newError","CustomError","captureStackTrace","pool","global","versions","node","window","freeze","isFinite","isset","isSet","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","key2Re","key32Re","key64Re","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","seenFirstField","invalid","genVerifyKey","genVerifyValue","oneofProp","Op","noop","State","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","$require","$module","amd","Long","isLong"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    var protobuf = $require(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n",null,"\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch: \"+formatStringOrScope);\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\nmodule.exports = common;\n\nvar commonRe = /\\/|\\./;\n\n/**\n * Provides common type definitions.\n * Can also be used to provide additional google types or your own custom types.\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\n * @returns {undefined}\n * @property {INamespace} google/protobuf/any.proto Any\n * @property {INamespace} google/protobuf/duration.proto Duration\n * @property {INamespace} google/protobuf/empty.proto Empty\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\n * @example\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\n * protobuf.common(\"descriptor\", descriptorJson);\n *\n * // manually provides a custom definition (uses my.foo namespace)\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\n */\nfunction common(name, json) {\n    if (!commonRe.test(name)) {\n        name = \"google/protobuf/\" + name + \".proto\";\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\n    }\n    common[name] = json;\n}\n\n// Not provided because of limited use (feel free to discuss or to provide yourself):\n//\n// google/protobuf/descriptor.proto\n// google/protobuf/source_context.proto\n// google/protobuf/type.proto\n//\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\n// the repository or package within the google/protobuf directory.\n\ncommon(\"any\", {\n\n    /**\n     * Properties of a google.protobuf.Any message.\n     * @interface IAny\n     * @type {Object}\n     * @property {string} [typeUrl]\n     * @property {Uint8Array} [bytes]\n     * @memberof common\n     */\n    Any: {\n        fields: {\n            type_url: {\n                type: \"string\",\n                id: 1\n            },\n            value: {\n                type: \"bytes\",\n                id: 2\n            }\n        }\n    }\n});\n\nvar timeType;\n\ncommon(\"duration\", {\n\n    /**\n     * Properties of a google.protobuf.Duration message.\n     * @interface IDuration\n     * @type {Object}\n     * @property {number|bigint} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */\n    Duration: timeType = {\n        fields: {\n            seconds: {\n                type: \"int64\",\n                id: 1\n            },\n            nanos: {\n                type: \"int32\",\n                id: 2\n            }\n        }\n    }\n});\n\ncommon(\"timestamp\", {\n\n    /**\n     * Properties of a google.protobuf.Timestamp message.\n     * @interface ITimestamp\n     * @type {Object}\n     * @property {number|bigint} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */\n    Timestamp: timeType\n});\n\ncommon(\"empty\", {\n\n    /**\n     * Properties of a google.protobuf.Empty message.\n     * @interface IEmpty\n     * @memberof common\n     */\n    Empty: {\n        fields: {}\n    }\n});\n\ncommon(\"struct\", {\n\n    /**\n     * Properties of a google.protobuf.Struct message.\n     * @interface IStruct\n     * @type {Object}\n     * @property {Object.<string,IValue>} [fields]\n     * @memberof common\n     */\n    Struct: {\n        fields: {\n            fields: {\n                keyType: \"string\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Value message.\n     * @interface IValue\n     * @type {Object}\n     * @property {string} [kind]\n     * @property {0} [nullValue]\n     * @property {number} [numberValue]\n     * @property {string} [stringValue]\n     * @property {boolean} [boolValue]\n     * @property {IStruct} [structValue]\n     * @property {IListValue} [listValue]\n     * @memberof common\n     */\n    Value: {\n        oneofs: {\n            kind: {\n                oneof: [\n                    \"nullValue\",\n                    \"numberValue\",\n                    \"stringValue\",\n                    \"boolValue\",\n                    \"structValue\",\n                    \"listValue\"\n                ]\n            }\n        },\n        fields: {\n            nullValue: {\n                type: \"NullValue\",\n                id: 1\n            },\n            numberValue: {\n                type: \"double\",\n                id: 2\n            },\n            stringValue: {\n                type: \"string\",\n                id: 3\n            },\n            boolValue: {\n                type: \"bool\",\n                id: 4\n            },\n            structValue: {\n                type: \"Struct\",\n                id: 5\n            },\n            listValue: {\n                type: \"ListValue\",\n                id: 6\n            }\n        }\n    },\n\n    NullValue: {\n        values: {\n            NULL_VALUE: 0\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.ListValue message.\n     * @interface IListValue\n     * @type {Object}\n     * @property {Array.<IValue>} [values]\n     * @memberof common\n     */\n    ListValue: {\n        fields: {\n            values: {\n                rule: \"repeated\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    }\n});\n\ncommon(\"wrappers\", {\n\n    /**\n     * Properties of a google.protobuf.DoubleValue message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    DoubleValue: {\n        fields: {\n            value: {\n                type: \"double\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.FloatValue message.\n     * @interface IFloatValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    FloatValue: {\n        fields: {\n            value: {\n                type: \"float\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Int64Value message.\n     * @interface IInt64Value\n     * @type {Object}\n     * @property {number|bigint} [value]\n     * @memberof common\n     */\n    Int64Value: {\n        fields: {\n            value: {\n                type: \"int64\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.UInt64Value message.\n     * @interface IUInt64Value\n     * @type {Object}\n     * @property {number|bigint} [value]\n     * @memberof common\n     */\n    UInt64Value: {\n        fields: {\n            value: {\n                type: \"uint64\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Int32Value message.\n     * @interface IInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    Int32Value: {\n        fields: {\n            value: {\n                type: \"int32\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.UInt32Value message.\n     * @interface IUInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    UInt32Value: {\n        fields: {\n            value: {\n                type: \"uint32\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.BoolValue message.\n     * @interface IBoolValue\n     * @type {Object}\n     * @property {boolean} [value]\n     * @memberof common\n     */\n    BoolValue: {\n        fields: {\n            value: {\n                type: \"bool\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.StringValue message.\n     * @interface IStringValue\n     * @type {Object}\n     * @property {string} [value]\n     * @memberof common\n     */\n    StringValue: {\n        fields: {\n            value: {\n                type: \"string\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.BytesValue message.\n     * @interface IBytesValue\n     * @type {Object}\n     * @property {Uint8Array} [value]\n     * @memberof common\n     */\n    BytesValue: {\n        fields: {\n            value: {\n                type: \"bytes\",\n                id: 1\n            }\n        }\n    }\n});\n\ncommon(\"field_mask\", {\n\n    /**\n     * Properties of a google.protobuf.FieldMask message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    FieldMask: {\n        fields: {\n            paths: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 1\n            }\n        }\n    }\n});\n\n/**\n * Gets the root definition of the specified common proto file.\n *\n * Bundled definitions are:\n * - google/protobuf/any.proto\n * - google/protobuf/duration.proto\n * - google/protobuf/empty.proto\n * - google/protobuf/field_mask.proto\n * - google/protobuf/struct.proto\n * - google/protobuf/timestamp.proto\n * - google/protobuf/wrappers.proto\n *\n * @param {string} file Proto file name\n * @returns {INamespace|null} Root definition or `null` if not defined\n */\ncommon.get = function get(file) {\n    return common[file] || null;\n};\n","\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = require(15),\n    util = require(37);\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(d%s){\", prop);\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\n                (\"default:\");\n                gen\n                (\"case%j:\", keys[i])\n                (\"case %i:\", values[keys[i]])\n                    (\"m%s=%j\", prop, values[keys[i]])\n                    (\"break\");\n            } gen\n            (\"}\");\n        } else gen\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\": gen\n                (\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\": gen\n                (\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(typeof d%s===\\\"string\\\"||typeof d%s===\\\"number\\\"||typeof d%s===\\\"bigint\\\")\", prop, prop, prop)\n                    (\"m%s=BigInt(d%s)\", prop, prop)\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toBigInt(%s)\", prop, prop, prop, isUnsigned);\n                break;\n            case \"bytes\": gen\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n                (\"else if(d%s.length >= 0)\", prop)\n                    (\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\": gen\n                (\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\": gen\n                (\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray;\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    (\"if(d instanceof this.ctor)\")\n        (\"return d\");\n    if (!fields.length) return gen\n    (\"return new this.ctor\");\n    gen\n    (\"var m=new this.ctor\");\n    for (var i = 0; i < fields.length; ++i) {\n        var field  = fields[i].resolve(),\n            prop   = util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) { gen\n    (\"if(d%s){\", prop)\n        (\"m%s={}\", prop)\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n        (\"}\")\n    (\"}\");\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(d%s){\", prop)\n        (\"if(!Array.isArray(d%s))\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n        (\"m%s=[]\", prop)\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n        (\"}\")\n    (\"}\");\n\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen\n    (\"}\");\n        }\n    }\n\n    const result = gen(\"return m\");\n    return result;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\n        else gen\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"d%s=o.longs===String ? util.LongBits.from(m%s).toBigInt(%s).toString(): o.longs===BigInt ? util.LongBits.from(m%s).toBigInt(%s) : m%s\", prop, prop, isUnsigned, prop, isUnsigned ? \"true\": \"\", prop);\n                break;\n            case \"bytes\": gen\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default: gen\n            (\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length)\n        return util.codegen()(\"return {}\");\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\n    (\"if(!o)\")\n        (\"o={}\")\n    (\"var d={}\");\n\n    var repeatedFields = [],\n        mapFields = [],\n        normalFields = [],\n        i = 0;\n    for (; i < fields.length; ++i)\n        if (!fields[i].partOf)\n            ( fields[i].resolve().repeated ? repeatedFields\n            : fields[i].map ? mapFields\n            : normalFields).push(fields[i]);\n\n    if (repeatedFields.length) { gen\n    (\"if(o.arrays||o.defaults){\");\n        for (i = 0; i < repeatedFields.length; ++i) gen\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (mapFields.length) { gen\n    (\"if(o.objects||o.defaults){\");\n        for (i = 0; i < mapFields.length; ++i) gen\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (normalFields.length) { gen\n    (\"if(o.defaults){\");\n        for (i = 0; i < normalFields.length; ++i) {\n            var field = normalFields[i],\n                prop  = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n            else if (field.long) gen\n            (\"var n=new util.LongBits(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n            (\"d%s=o.longs===String?n.toBigInt().toString():o.longs===BigInt?n.toBigInt().toString():n\", prop);\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\n        (\"else{\")\n            (\"d%s=%s\", prop, arrayDefault)\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\n        (\"}\");\n            } else gen\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        } gen\n    (\"}\");\n    }\n    var hasKs2 = false;\n    for (i = 0; i < fields.length; ++i) {\n        var field = fields[i],\n            index = mtype._fieldsArray.indexOf(field),\n            prop  = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) { hasKs2 = true; gen\n    (\"var ks2\");\n            } gen\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n        (\"d%s={}\", prop)\n        (\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n        (\"}\");\n        } else if (field.repeated) { gen\n    (\"if(m%s&&m%s.length){\", prop, prop)\n        (\"d%s=[]\", prop)\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n        (\"}\");\n        } else { gen\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n        if (field.partOf) gen\n        (\"if(o.oneofs)\")\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen\n    (\"}\");\n    }\n    const result = gen\n        (\"return d\");\n    return result;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n","\"use strict\";\nmodule.exports = decoder;\n\nvar Enum    = require(15),\n    types   = require(36),\n    util    = require(37);\n\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\n    (\"if(!(r instanceof Reader))\")\n        (\"r=Reader.create(r)\")\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k,value\" : \"\"))\n    (\"while(r.pos<c){\")\n        (\"var t=r.uint32()\");\n    if (mtype.group) gen\n        (\"if((t&7)===4)\")\n            (\"break\");\n    gen\n        (\"switch(t>>>3){\");\n\n    var i = 0;\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            ref   = \"m\" + util.safeProp(field.name); gen\n            (\"case %i:\", field.id);\n\n        // Map fields\n        if (field.map) { gen\n                (\"var c2 = r.uint32()+r.pos\");\n\n            if (types.defaults[field.keyType] !== undefined) gen\n                (\"k=%j\", types.defaults[field.keyType]);\n            else gen\n                (\"k=null\");\n\n            if (types.defaults[type] !== undefined) gen\n                (\"value=%j\", types.defaults[type]);\n            else gen\n                (\"value=null\");\n\n            gen\n                (\"while(r.pos<c2){\")\n                    (\"var tag2=r.uint32()\")\n                    (\"switch(tag2>>>3){\")\n                        (\"case 1: k=r.%s(); break\", field.keyType)\n                        (\"case 2:\");\n\n            if (types.basic[type] === undefined) gen\n                            (\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n            else gen\n                            (\"value=r.%s()\", type);\n\n            gen\n                            (\"break\")\n                        (\"default:\")\n                            (\"r.skipType(tag2&7)\")\n                            (\"break\")\n                    (\"}\")\n                (\"}\");\n            gen\n                (\"if(! %s )\", ref)\n                    (\"%s={}\", ref);\n            gen\n                (\"%s[String(k)] = value\", ref);\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n\n                (\"if(!(%s&&%s.length))\", ref, ref)\n                    (\"%s=[]\", ref);\n\n            // Packable (always check for forward and backward compatiblity)\n            if (types.packed[type] !== undefined) gen\n                (\"if((t&7)===2){\")\n                    (\"var c2=r.uint32()+r.pos\")\n                    (\"while(r.pos<c2)\")\n                        (\"%s.push(r.%s())\", ref, type)\n                (\"}else\");\n\n            // Non-packed\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\n                    ? \"%s.push(types[%i].decode(r))\"\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n            else gen\n                    (\"%s.push(r.%s())\", ref, type);\n\n        // Non-repeated\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\n                ? \"%s=types[%i].decode(r)\"\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n        else gen\n                (\"%s=r.%s()\", ref, type);\n        gen\n                (\"break\");\n    // Unknown fields\n    } gen\n            (\"default:\")\n                (\"r.skipType(t&7)\")\n                (\"break\")\n\n        (\"}\")\n    (\"}\");\n\n    // Field presence\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\n        var rfield = mtype._fieldsArray[i];\n        if (rfield.required) gen\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n\n    const result = gen\n        (\"return m\");\n\n    return result;\n    /* eslint-enable no-unexpected-multiline */\n}\n","\"use strict\";\nmodule.exports = encoder;\n\nvar Enum     = require(15),\n    types    = require(36),\n    util     = require(37);\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n    return field.resolvedType.group\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\n    (\"if(!w)\")\n        (\"w=Writer.create()\");\n\n    var i, ref;\n\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n\n    for (var i = 0; i < fields.length; ++i) {\n        var field    = fields[i].resolve(),\n            index    = mtype._fieldsArray.indexOf(field),\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            wireType = types.basic[type];\n            ref      = \"m\" + util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) {\n            gen\n    (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n            if (wireType === undefined) gen\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n            else gen\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n            gen\n        (\"}\")\n    (\"}\");\n\n            // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n            // Packed repeated\n            if (field.packed && types.packed[type] !== undefined) { gen\n\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\n        (\"for(var i=0;i<%s.length;++i)\", ref)\n            (\"w.%s(%s[i])\", type, ref)\n        (\"w.ldelim()\");\n\n            // Non-packed\n            } else { gen\n\n        (\"for(var i=0;i<%s.length;++i)\", ref);\n                if (wireType === undefined)\n            genTypePartial(gen, field, index, ref + \"[i]\");\n                else gen\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n            } gen\n    (\"}\");\n\n        // Non-repeated\n        } else {\n            if (field.optional) gen\n    (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n\n            if (wireType === undefined)\n        genTypePartial(gen, field, index, ref);\n            else gen\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n        }\n    }\n\n    const result = gen\n        (\"return w\");\n\n    return result;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n","\"use strict\";\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(24);\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(23),\n    util = require(37);\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n */\nfunction Enum(name, values, options, comment, comments) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = comments || {};\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"  , this.options,\n        \"values\"   , this.values,\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\"  , keepComments ? this.comment : undefined,\n        \"comments\" , keepComments ? this.comments : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n","\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(24);\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(15),\n    types = require(36),\n    util  = require(37);\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = types.long[type] !== undefined;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | bigint | bigint[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n","\"use strict\";\nvar protobuf = module.exports = require(18);\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(14);\nprotobuf.decoder          = require(13);\nprotobuf.verifier         = require(40);\nprotobuf.converter        = require(12);\n\n// Reflection\nprotobuf.ReflectionObject = require(24);\nprotobuf.Namespace        = require(23);\nprotobuf.Root             = require(29);\nprotobuf.Enum             = require(15);\nprotobuf.Type             = require(35);\nprotobuf.Field            = require(16);\nprotobuf.OneOf            = require(25);\nprotobuf.MapField         = require(20);\nprotobuf.Service          = require(33);\nprotobuf.Method           = require(22);\n\n// Runtime\nprotobuf.Message          = require(21);\nprotobuf.wrappers         = require(41);\n\n// Utility\nprotobuf.types            = require(36);\nprotobuf.util             = require(37);\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(42);\nprotobuf.BufferWriter = require(43);\nprotobuf.Reader       = require(27);\nprotobuf.BufferReader = require(28);\n\n// Utility\nprotobuf.util         = require(39);\nprotobuf.rpc          = require(31);\nprotobuf.roots        = require(30);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nvar protobuf = module.exports = require(17);\n\nprotobuf.build = \"full\";\n\n// Parser\nprotobuf.tokenize         = require(34);\nprotobuf.parse            = require(26);\nprotobuf.common           = require(11);\n\n// Configure parser\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\n","\"use strict\";\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(16);\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = require(36),\n    util    = require(37);\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | bigint | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n","\"use strict\";\nmodule.exports = Message;\n\nvar util = require(39);\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */\nfunction Message(properties) {\n    // not used internally\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n    return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*/","\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(24);\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(37);\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Options properly parsed into an object\n     */\n    this.parsedOptions = parsedOptions;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined,\n        \"parsedOptions\"  , this.parsedOptions,\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n","\"use strict\";\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(24);\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\n\nvar Field    = require(16),\n    util     = require(37);\n\nvar Type,    // cyclic\n    Service,\n    Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length))\n        return undefined;\n    var obj = {};\n    for (var i = 0; i < array.length; ++i)\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\n\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id)\n                return true;\n    return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (reserved[i] === name)\n                return true;\n    return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */\n    this.nested = undefined; // toJSON\n\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */\n    this._nestedArray = null;\n}\n\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\n */\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\" , this.options,\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */\n    if (nestedJson) {\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n            nested = nestedJson[names[i]];\n            ns.add( // most to least likely\n                ( nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : nested.id !== undefined\n                ? Field.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    }\n    return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum)\n        return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\n        throw TypeError(\"object must be a valid nested object\");\n\n    if (!this.nested)\n        this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for (var i = 0; i < nested.length; ++i)\n                    object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested)\n                    this.nested = {};\n                object.setOptions(prev.options, true);\n\n            } else\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n\n    if (!(object instanceof ReflectionObject))\n        throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this)\n        throw Error(object + \" is not a member of \" + this);\n\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length)\n        this.nested = undefined;\n\n    object.onRemove(this);\n    return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n\n    if (util.isString(path))\n        path = path.split(\".\");\n    else if (!Array.isArray(path))\n        throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\")\n        throw Error(\"path must be relative\");\n\n    var ptr = this;\n    while (path.length > 0) {\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace))\n                throw Error(\"path conflicts with non-namespace objects\");\n        } else\n            ptr.add(ptr = new Namespace(part));\n    }\n    if (json)\n        ptr.addJSON(json);\n    return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n    var nested = this.nestedArray, i = 0;\n    while (i < nested.length)\n        if (nested[i] instanceof Namespace)\n            nested[i++].resolveAll();\n        else\n            nested[i++].resolve();\n    return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n\n    /* istanbul ignore next */\n    if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes))\n        filterTypes = [ filterTypes ];\n\n    if (util.isString(path) && path.length) {\n        if (path === \".\")\n            return this.root;\n        path = path.split(\".\");\n    } else if (!path.length)\n        return this;\n\n    // Start at root if path is absolute\n    if (path[0] === \"\")\n        return this.root.lookup(path.slice(1), filterTypes);\n\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    if (found) {\n        if (path.length === 1) {\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\n                return found;\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\n            return found;\n\n    // Otherwise try each nested namespace\n    } else\n        for (var i = 0; i < this.nestedArray.length; ++i)\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\n                return found;\n\n    // If there hasn't been a match, try again at the parent\n    if (this.parent === null || parentAlreadyChecked)\n        return null;\n    return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [ Type ]);\n    if (!found)\n        throw Error(\"no such type: \" + path);\n    return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [ Enum ]);\n    if (!found)\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [ Type, Enum ]);\n    if (!found)\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [ Service ]);\n    if (!found)\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type    = Type_;\n    Service = Service_;\n    Enum    = Enum_;\n};\n","\"use strict\";\nmodule.exports = ReflectionObject;\n\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = require(37);\n\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (options && !util.isObject(options))\n        throw TypeError(\"options must be an object\");\n\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */\n    this.options = options; // toJSON\n\n    /**\n     * Parsed Options.\n     * @type {Array.<Object.<string,*>>|undefined}\n     */\n    this.parsedOptions = null;\n\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */\n    this.parent = null;\n\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */\n    this.resolved = false;\n\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */\n    this.comment = null;\n\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */\n    this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */\n    root: {\n        get: function() {\n            var ptr = this;\n            while (ptr.parent !== null)\n                ptr = ptr.parent;\n            return ptr;\n        }\n    },\n\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */\n    fullName: {\n        get: function() {\n            var path = [ this.name ],\n                ptr = this.parent;\n            while (ptr) {\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent)\n        this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n    if (this.root instanceof Root)\n        this.resolved = true; // only if part of a root\n    return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options)\n        return this.options[name];\n    return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\n        (this.options || (this.options = {}))[name] = value;\n    return this;\n};\n\n/**\n * Sets a parsed option.\n * @param {string} name parsed Option name\n * @param {*} value Option value\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n    if (!this.parsedOptions) {\n        this.parsedOptions = [];\n    }\n    var parsedOptions = this.parsedOptions;\n    if (propName) {\n        // If setting a sub property of an option then try to merge it\n        // with an existing option\n        var opt = parsedOptions.find(function (opt) {\n            return Object.prototype.hasOwnProperty.call(opt, name);\n        });\n        if (opt) {\n            // If we found an existing option - just merge the property value\n            var newValue = opt[name];\n            util.setProperty(newValue, propName, value);\n        } else {\n            // otherwise, create a new option, set it's property and add it to the list\n            opt = {};\n            opt[name] = util.setProperty({}, propName, value);\n            parsedOptions.push(opt);\n        }\n    } else {\n        // Always create a new option when setting the value of the option itself\n        var newOpt = {};\n        newOpt[name] = value;\n        parsedOptions.push(newOpt);\n    }\n    return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options)\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className,\n        fullName  = this.fullName;\n    if (fullName.length)\n        return className + \" \" + fullName;\n    return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n","\"use strict\";\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(24);\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(16),\n    util  = require(37);\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n","\"use strict\";\nmodule.exports = parse;\n\nparse.filename = null;\nparse.defaults = { keepCase: false };\n\nvar tokenize  = require(34),\n    Root      = require(29),\n    Type      = require(35),\n    Field     = require(16),\n    MapField  = require(20),\n    OneOf     = require(25),\n    Enum      = require(15),\n    Service   = require(33),\n    Method    = require(22),\n    types     = require(36),\n    util      = require(37);\n\nvar base10Re    = /^[1-9][0-9]*$/,\n    base10NegRe = /^-?[1-9][0-9]*$/,\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n    base8Re     = /^0[0-7]+$/,\n    base8NegRe  = /^-?0[0-7]+$/,\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\n * @property {Root} root Populated root instance\n */\n\n/**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n */\n\n/**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */\nfunction parse(source, root, options) {\n    /* eslint-disable callback-return */\n    if (!(root instanceof Root)) {\n        options = root;\n        root = new Root();\n    }\n    if (!options)\n        options = parse.defaults;\n\n    var preferTrailingComment = options.preferTrailingComment || false;\n    var tn = tokenize(source, options.alternateCommentMode || false),\n        next = tn.next,\n        push = tn.push,\n        peek = tn.peek,\n        skip = tn.skip,\n        cmnt = tn.cmnt;\n\n    var head = true,\n        pkg,\n        imports,\n        weakImports,\n        syntax,\n        isProto3 = false;\n\n    var ptr = root;\n\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\n\n    /* istanbul ignore next */\n    function illegal(token, name, insideTryCatch) {\n        var filename = parse.filename;\n        if (!insideTryCatch)\n            parse.filename = null;\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n    }\n\n    function readString() {\n        var values = [],\n            token;\n        do {\n            /* istanbul ignore if */\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\n                throw illegal(token);\n\n            values.push(next());\n            skip(token);\n            token = peek();\n        } while (token === \"\\\"\" || token === \"'\");\n        return values.join(\"\");\n    }\n\n    function readValue(acceptTypeRef) {\n        var token = next();\n        switch (token) {\n            case \"'\":\n            case \"\\\"\":\n                push(token);\n                return readString();\n            case \"true\": case \"TRUE\":\n                return true;\n            case \"false\": case \"FALSE\":\n                return false;\n        }\n        try {\n            return parseNumber(token, /* insideTryCatch */ true);\n        } catch (e) {\n\n            /* istanbul ignore else */\n            if (acceptTypeRef && typeRefRe.test(token))\n                return token;\n\n            /* istanbul ignore next */\n            throw illegal(token, \"value\");\n        }\n    }\n\n    function readRanges(target, acceptStrings) {\n        var token, start;\n        do {\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\n                target.push(readString());\n            else\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\n        } while (skip(\",\", true));\n        skip(\";\");\n    }\n\n    function parseNumber(token, insideTryCatch) {\n        var sign = 1;\n        if (token.charAt(0) === \"-\") {\n            sign = -1;\n            token = token.substring(1);\n        }\n        switch (token) {\n            case \"inf\": case \"INF\": case \"Inf\":\n                return sign * Infinity;\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\n                return NaN;\n            case \"0\":\n                return 0;\n        }\n        if (base10Re.test(token))\n            return sign * parseInt(token, 10);\n        if (base16Re.test(token))\n            return sign * parseInt(token, 16);\n        if (base8Re.test(token))\n            return sign * parseInt(token, 8);\n\n        /* istanbul ignore else */\n        if (numberRe.test(token))\n            return sign * parseFloat(token);\n\n        /* istanbul ignore next */\n        throw illegal(token, \"number\", insideTryCatch);\n    }\n\n    function parseId(token, acceptNegative) {\n        switch (token) {\n            case \"max\": case \"MAX\": case \"Max\":\n                return 536870911;\n            case \"0\":\n                return 0;\n        }\n\n        /* istanbul ignore if */\n        if (!acceptNegative && token.charAt(0) === \"-\")\n            throw illegal(token, \"id\");\n\n        if (base10NegRe.test(token))\n            return parseInt(token, 10);\n        if (base16NegRe.test(token))\n            return parseInt(token, 16);\n\n        /* istanbul ignore else */\n        if (base8NegRe.test(token))\n            return parseInt(token, 8);\n\n        /* istanbul ignore next */\n        throw illegal(token, \"id\");\n    }\n\n    function parsePackage() {\n\n        /* istanbul ignore if */\n        if (pkg !== undefined)\n            throw illegal(\"package\");\n\n        pkg = next();\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(pkg))\n            throw illegal(pkg, \"name\");\n\n        ptr = ptr.define(pkg);\n        skip(\";\");\n    }\n\n    function parseImport() {\n        var token = peek();\n        var whichImports;\n        switch (token) {\n            case \"weak\":\n                whichImports = weakImports || (weakImports = []);\n                next();\n                break;\n            case \"public\":\n                next();\n                // eslint-disable-line no-fallthrough\n            default:\n                whichImports = imports || (imports = []);\n                break;\n        }\n        token = readString();\n        skip(\";\");\n        whichImports.push(token);\n    }\n\n    function parseSyntax() {\n        skip(\"=\");\n        syntax = readString();\n        isProto3 = syntax === \"proto3\";\n\n        /* istanbul ignore if */\n        if (!isProto3 && syntax !== \"proto2\")\n            throw illegal(syntax, \"syntax\");\n\n        skip(\";\");\n    }\n\n    function parseCommon(parent, token) {\n        switch (token) {\n\n            case \"option\":\n                parseOption(parent, token);\n                skip(\";\");\n                return true;\n\n            case \"message\":\n                parseType(parent, token);\n                return true;\n\n            case \"enum\":\n                parseEnum(parent, token);\n                return true;\n\n            case \"service\":\n                parseService(parent, token);\n                return true;\n\n            case \"extend\":\n                parseExtension(parent, token);\n                return true;\n        }\n        return false;\n    }\n\n    function ifBlock(obj, fnIf, fnElse) {\n        var trailingLine = tn.line;\n        if (obj) {\n            if(typeof obj.comment !== \"string\") {\n              obj.comment = cmnt(); // try block-type comment\n            }\n            obj.filename = parse.filename;\n        }\n        if (skip(\"{\", true)) {\n            var token;\n            while ((token = next()) !== \"}\")\n                fnIf(token);\n            skip(\";\", true);\n        } else {\n            if (fnElse)\n                fnElse();\n            skip(\";\");\n            if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment))\n                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n        }\n    }\n\n    function parseType(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"type name\");\n\n        var type = new Type(token);\n        ifBlock(type, function parseType_block(token) {\n            if (parseCommon(type, token))\n                return;\n\n            switch (token) {\n\n                case \"map\":\n                    parseMapField(type, token);\n                    break;\n\n                case \"required\":\n                case \"optional\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n\n                case \"oneof\":\n                    parseOneOf(type, token);\n                    break;\n\n                case \"extensions\":\n                    readRanges(type.extensions || (type.extensions = []));\n                    break;\n\n                case \"reserved\":\n                    readRanges(type.reserved || (type.reserved = []), true);\n                    break;\n\n                default:\n                    /* istanbul ignore if */\n                    if (!isProto3 || !typeRefRe.test(token))\n                        throw illegal(token);\n\n                    push(token);\n                    parseField(type, \"optional\");\n                    break;\n            }\n        });\n        parent.add(type);\n    }\n\n    function parseField(parent, rule, extend) {\n        var type = next();\n        if (type === \"group\") {\n            parseGroup(parent, rule);\n            return;\n        }\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(type))\n            throw illegal(type, \"type\");\n\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        name = applyCase(name);\n        skip(\"=\");\n\n        var field = new Field(name, parseId(next()), type, rule, extend);\n        ifBlock(field, function parseField_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseField_line() {\n            parseInlineOptions(field);\n        });\n        parent.add(field);\n\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\n        // all known packable types and anything that could be an enum (= is not a basic type).\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\n    }\n\n    function parseGroup(parent, rule) {\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        var fieldName = util.lcFirst(name);\n        if (name === fieldName)\n            name = util.ucFirst(name);\n        skip(\"=\");\n        var id = parseId(next());\n        var type = new Type(name);\n        type.group = true;\n        var field = new Field(fieldName, id, name, rule);\n        field.filename = parse.filename;\n        ifBlock(type, function parseGroup_block(token) {\n            switch (token) {\n\n                case \"option\":\n                    parseOption(type, token);\n                    skip(\";\");\n                    break;\n\n                case \"required\":\n                case \"optional\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n\n                /* istanbul ignore next */\n                default:\n                    throw illegal(token); // there are no groups with proto3 semantics\n            }\n        });\n        parent.add(type)\n              .add(field);\n    }\n\n    function parseMapField(parent) {\n        skip(\"<\");\n        var keyType = next();\n\n        /* istanbul ignore if */\n        if (types.mapKey[keyType] === undefined)\n            throw illegal(keyType, \"type\");\n\n        skip(\",\");\n        var valueType = next();\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(valueType))\n            throw illegal(valueType, \"type\");\n\n        skip(\">\");\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        skip(\"=\");\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n        ifBlock(field, function parseMapField_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseMapField_line() {\n            parseInlineOptions(field);\n        });\n        parent.add(field);\n    }\n\n    function parseOneOf(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var oneof = new OneOf(applyCase(token));\n        ifBlock(oneof, function parseOneOf_block(token) {\n            if (token === \"option\") {\n                parseOption(oneof, token);\n                skip(\";\");\n            } else {\n                push(token);\n                parseField(oneof, \"optional\");\n            }\n        });\n        parent.add(oneof);\n    }\n\n    function parseEnum(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var enm = new Enum(token);\n        ifBlock(enm, function parseEnum_block(token) {\n          switch(token) {\n            case \"option\":\n              parseOption(enm, token);\n              skip(\";\");\n              break;\n\n            case \"reserved\":\n              readRanges(enm.reserved || (enm.reserved = []), true);\n              break;\n\n            default:\n              parseEnumValue(enm, token);\n          }\n        });\n        parent.add(enm);\n    }\n\n    function parseEnumValue(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token))\n            throw illegal(token, \"name\");\n\n        skip(\"=\");\n        var value = parseId(next(), true),\n            dummy = {};\n        ifBlock(dummy, function parseEnumValue_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(dummy, token); // skip\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseEnumValue_line() {\n            parseInlineOptions(dummy); // skip\n        });\n        parent.add(token, value, dummy.comment);\n    }\n\n    function parseOption(parent, token) {\n        var isCustom = skip(\"(\", true);\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var name = token;\n        var option = name;\n        var propName;\n\n        if (isCustom) {\n            skip(\")\");\n            name = \"(\" + name + \")\";\n            option = name;\n            token = peek();\n            if (fqTypeRefRe.test(token)) {\n                propName = token.substr(1); //remove '.' before property name\n                name += token;\n                next();\n            }\n        }\n        skip(\"=\");\n        var optionValue = parseOptionValue(parent, name);\n        setParsedOption(parent, option, optionValue, propName);\n    }\n\n    function parseOptionValue(parent, name) {\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\n            var result = {};\n            while (!skip(\"}\", true)) {\n                /* istanbul ignore if */\n                if (!nameRe.test(token = next()))\n                    throw illegal(token, \"name\");\n\n                var value;\n                var propName = token;\n                if (peek() === \"{\")\n                    value = parseOptionValue(parent, name + \".\" + token);\n                else {\n                    skip(\":\");\n                    if (peek() === \"{\")\n                        value = parseOptionValue(parent, name + \".\" + token);\n                    else {\n                        value = readValue(true);\n                        setOption(parent, name + \".\" + token, value);\n                    }\n                }\n                var prevValue = result[propName];\n                if (prevValue)\n                    value = [].concat(prevValue).concat(value);\n                result[propName] = value;\n                skip(\",\", true);\n            }\n            return result;\n        }\n\n        var simpleValue = readValue(true);\n        setOption(parent, name, simpleValue);\n        return simpleValue;\n        // Does not enforce a delimiter to be universal\n    }\n\n    function setOption(parent, name, value) {\n        if (parent.setOption)\n            parent.setOption(name, value);\n    }\n\n    function setParsedOption(parent, name, value, propName) {\n        if (parent.setParsedOption)\n            parent.setParsedOption(name, value, propName);\n    }\n\n    function parseInlineOptions(parent) {\n        if (skip(\"[\", true)) {\n            do {\n                parseOption(parent, \"option\");\n            } while (skip(\",\", true));\n            skip(\"]\");\n        }\n        return parent;\n    }\n\n    function parseService(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"service name\");\n\n        var service = new Service(token);\n        ifBlock(service, function parseService_block(token) {\n            if (parseCommon(service, token))\n                return;\n\n            /* istanbul ignore else */\n            if (token === \"rpc\")\n                parseMethod(service, token);\n            else\n                throw illegal(token);\n        });\n        parent.add(service);\n    }\n\n    function parseMethod(parent, token) {\n        // Get the comment of the preceding line now (if one exists) in case the\n        // method is defined across multiple lines.\n        var commentText = cmnt();\n\n        var type = token;\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var name = token,\n            requestType, requestStream,\n            responseType, responseStream;\n\n        skip(\"(\");\n        if (skip(\"stream\", true))\n            requestStream = true;\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token);\n\n        requestType = token;\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\n        if (skip(\"stream\", true))\n            responseStream = true;\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token);\n\n        responseType = token;\n        skip(\")\");\n\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n        method.comment = commentText;\n        ifBlock(method, function parseMethod_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(method, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        });\n        parent.add(method);\n    }\n\n    function parseExtension(parent, token) {\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token, \"reference\");\n\n        var reference = token;\n        ifBlock(null, function parseExtension_block(token) {\n            switch (token) {\n\n                case \"required\":\n                case \"repeated\":\n                case \"optional\":\n                    parseField(parent, token, reference);\n                    break;\n\n                default:\n                    /* istanbul ignore if */\n                    if (!isProto3 || !typeRefRe.test(token))\n                        throw illegal(token);\n                    push(token);\n                    parseField(parent, \"optional\", reference);\n                    break;\n            }\n        });\n    }\n\n    var token;\n    while ((token = next()) !== null) {\n        switch (token) {\n\n            case \"package\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parsePackage();\n                break;\n\n            case \"import\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parseImport();\n                break;\n\n            case \"syntax\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parseSyntax();\n                break;\n\n            case \"option\":\n\n                parseOption(ptr, token);\n                skip(\";\");\n                break;\n\n            default:\n\n                /* istanbul ignore else */\n                if (parseCommon(ptr, token)) {\n                    head = false;\n                    continue;\n                }\n\n                /* istanbul ignore next */\n                throw illegal(token);\n        }\n    }\n\n    parse.filename = null;\n    return {\n        \"package\"     : pkg,\n        \"imports\"     : imports,\n         weakImports  : weakImports,\n         syntax       : syntax,\n         root         : root\n    };\n}\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n */\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(39);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.int64 = function() {\n    return readLongVarint.call(this).toBigInt();\n};\n\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.uint64 = function() {\n    return readLongVarint.call(this).toBigInt();\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.sint64 = function() {\n    return readLongVarint.call(this).zzDecode().toBigInt();\n};\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.fixed64 = function() {\n    return readFixed64.call(this).toBigInt();\n};\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.sfixed64 = function() {\n    return readFixed64.call(this).toBigInt();\n};\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(27);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(39);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(23);\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = require(16),\n    Enum    = require(15),\n    OneOf   = require(25),\n    util    = require(37);\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname;\n        }\n        return null;\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            self.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type   = Type_;\n    parse  = parse_;\n    common = common_;\n};\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(32);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(39);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(23);\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(22),\n    util   = require(37),\n    rpc    = require(31);\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n","\"use strict\";\nmodule.exports = tokenize;\n\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\n\nvar setCommentRe = /^ *[*/]+ */,\n    setCommentAltRe = /^\\s*\\*?\\/*/,\n    setCommentSplitRe = /\\n/g,\n    whitespaceRe = /\\s/,\n    unescapeRe = /\\\\(.?)/g;\n\nvar unescapeMap = {\n    \"0\": \"\\0\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\\t\"\n};\n\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\nfunction unescape(str) {\n    return str.replace(unescapeRe, function($0, $1) {\n        switch ($1) {\n            case \"\\\\\":\n            case \"\":\n                return $1;\n            default:\n                return unescapeMap[$1] || \"\";\n        }\n    });\n}\n\ntokenize.unescape = unescape;\n\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\nfunction tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */\n    source = source.toString();\n\n    var offset = 0,\n        length = source.length,\n        line = 1,\n        commentType = null,\n        commentText = null,\n        commentLine = 0,\n        commentLineEmpty = false,\n        commentIsLeading = false;\n\n    var stack = [];\n\n    var stringDelim = null;\n\n    /* istanbul ignore next */\n    /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */\n    function illegal(subject) {\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */\n    function readString() {\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n        re.lastIndex = offset - 1;\n        var match = re.exec(source);\n        if (!match)\n            throw illegal(\"string\");\n        offset = re.lastIndex;\n        push(stringDelim);\n        stringDelim = null;\n        return unescape(match[1]);\n    }\n\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */\n    function charAt(pos) {\n        return source.charAt(pos);\n    }\n\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */\n    function setComment(start, end, isLeading) {\n        commentType = source.charAt(start++);\n        commentLine = line;\n        commentLineEmpty = false;\n        commentIsLeading = isLeading;\n        var lookback;\n        if (alternateCommentMode) {\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\n        } else {\n            lookback = 3;  // \"///\" or \"/**\"\n        }\n        var commentOffset = start - lookback,\n            c;\n        do {\n            if (--commentOffset < 0 ||\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\n                commentLineEmpty = true;\n                break;\n            }\n        } while (c === \" \" || c === \"\\t\");\n        var lines = source\n            .substring(start, end)\n            .split(setCommentSplitRe);\n        for (var i = 0; i < lines.length; ++i)\n            lines[i] = lines[i]\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\n                .trim();\n        commentText = lines\n            .join(\"\\n\")\n            .trim();\n    }\n\n    function isDoubleSlashCommentLine(startOffset) {\n        var endOffset = findEndOfLine(startOffset);\n\n        // see if remaining line matches comment pattern\n        var lineText = source.substring(startOffset, endOffset);\n        // look for 1 or 2 slashes since startOffset would already point past\n        // the first slash that started the comment.\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\n        return isComment;\n    }\n\n    function findEndOfLine(cursor) {\n        // find end of cursor's line\n        var endOffset = cursor;\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n            endOffset++;\n        }\n        return endOffset;\n    }\n\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */\n    function next() {\n        if (stack.length > 0)\n            return stack.shift();\n        if (stringDelim)\n            return readString();\n        var repeat,\n            prev,\n            curr,\n            start,\n            isDoc,\n            isLeadingComment = offset === 0;\n        do {\n            if (offset === length)\n                return null;\n            repeat = false;\n            while (whitespaceRe.test(curr = charAt(offset))) {\n                if (curr === \"\\n\") {\n                    isLeadingComment = true;\n                    ++line;\n                }\n                if (++offset === length)\n                    return null;\n            }\n\n            if (charAt(offset) === \"/\") {\n                if (++offset === length) {\n                    throw illegal(\"comment\");\n                }\n                if (charAt(offset) === \"/\") { // Line\n                    if (!alternateCommentMode) {\n                        // check for triple-slash comment\n                        isDoc = charAt(start = offset + 1) === \"/\";\n\n                        while (charAt(++offset) !== \"\\n\") {\n                            if (offset === length) {\n                                return null;\n                            }\n                        }\n                        ++offset;\n                        if (isDoc) {\n                            setComment(start, offset - 1, isLeadingComment);\n                        }\n                        ++line;\n                        repeat = true;\n                    } else {\n                        // check for double-slash comments, consolidating consecutive lines\n                        start = offset;\n                        isDoc = false;\n                        if (isDoubleSlashCommentLine(offset)) {\n                            isDoc = true;\n                            do {\n                                offset = findEndOfLine(offset);\n                                if (offset === length) {\n                                    break;\n                                }\n                                offset++;\n                            } while (isDoubleSlashCommentLine(offset));\n                        } else {\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\n                        }\n                        if (isDoc) {\n                            setComment(start, offset, isLeadingComment);\n                        }\n                        line++;\n                        repeat = true;\n                    }\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\n                    start = offset + 1;\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\n                    do {\n                        if (curr === \"\\n\") {\n                            ++line;\n                        }\n                        if (++offset === length) {\n                            throw illegal(\"comment\");\n                        }\n                        prev = curr;\n                        curr = charAt(offset);\n                    } while (prev !== \"*\" || curr !== \"/\");\n                    ++offset;\n                    if (isDoc) {\n                        setComment(start, offset - 2, isLeadingComment);\n                    }\n                    repeat = true;\n                } else {\n                    return \"/\";\n                }\n            }\n        } while (repeat);\n\n        // offset !== length if we got here\n\n        var end = offset;\n        delimRe.lastIndex = 0;\n        var delim = delimRe.test(charAt(end++));\n        if (!delim)\n            while (end < length && !delimRe.test(charAt(end)))\n                ++end;\n        var token = source.substring(offset, offset = end);\n        if (token === \"\\\"\" || token === \"'\")\n            stringDelim = token;\n        return token;\n    }\n\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */\n    function push(token) {\n        stack.push(token);\n    }\n\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */\n    function peek() {\n        if (!stack.length) {\n            var token = next();\n            if (token === null)\n                return null;\n            push(token);\n        }\n        return stack[0];\n    }\n\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */\n    function skip(expected, optional) {\n        var actual = peek(),\n            equals = actual === expected;\n        if (equals) {\n            next();\n            return true;\n        }\n        if (!optional)\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n        return false;\n    }\n\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */\n    function cmnt(trailingLine) {\n        var ret = null;\n        if (trailingLine === undefined) {\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\n                ret = commentIsLeading ? commentText : null;\n            }\n        } else {\n            /* istanbul ignore else */\n            if (commentLine < trailingLine) {\n                peek();\n            }\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\n                ret = commentIsLeading ? null : commentText;\n            }\n        }\n        return ret;\n    }\n\n    return Object.defineProperty({\n        next: next,\n        peek: peek,\n        push: push,\n        skip: skip,\n        cmnt: cmnt\n    }, \"line\", {\n        get: function() { return line; }\n    });\n    /* eslint-enable callback-return */\n}\n","\"use strict\";\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(23);\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = require(15),\n    OneOf     = require(25),\n    Field     = require(16),\n    MapField  = require(20),\n    Service   = require(33),\n    Message   = require(21),\n    Reader    = require(27),\n    Writer    = require(42),\n    util      = require(37),\n    encoder   = require(14),\n    decoder   = require(13),\n    verifier  = require(40),\n    converter = require(12),\n    wrappers  = require(41);\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"p\"], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n        if ((field = mtype._fieldsArray[i]).map) gen\n            (\"this%s={}\", util.safeProp(field.name));\n        else if (field.repeated) gen\n            (\"this%s=[]\", util.safeProp(field.name));\n    return gen\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n        (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]])\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    if (json.comment)\n        type.comment = json.comment;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined,\n        \"comment\"    , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n    return this.fields[name]\n        || this.oneofs && this.oneofs[name]\n        || this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `BigInt` (the global types).\n * Defaults to copy the present value.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n","\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(37);\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n","\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = require(39);\n\nvar roots = require(30);\n\nvar Type, // cyclic\n    Enum;\n\nutil.codegen = require(3);\nutil.fetch   = require(5);\nutil.path    = require(8);\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n    if (object) {\n        var keys  = Object.keys(object),\n            array = new Array(keys.length),\n            index = 0;\n        while (index < keys.length)\n            array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n    var object = {},\n        index  = 0;\n    while (index < array.length) {\n        var key = array[index++],\n            val = array[index++];\n        if (val !== undefined)\n            object[key] = val;\n    }\n    return object;\n};\n\nvar safePropBackslashRe = /\\\\/g,\n    safePropQuoteRe     = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n    return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n    return str.substring(0, 1)\n         + str.substring(1)\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n\n    /* istanbul ignore if */\n    if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n\n    /* istanbul ignore next */\n    if (!Type)\n        Type = require(35);\n\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\n    return type;\n};\n\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n\n    /* istanbul ignore if */\n    if (object.$type)\n        return object.$type;\n\n    /* istanbul ignore next */\n    if (!Enum)\n        Enum = require(15);\n\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\n    return enm;\n};\n\n\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @returns {Object.<string,*>} Destination object\n */\nutil.setProperty = function setProperty(dst, path, value) {\n    function setProp(dst, path, value) {\n        var part = path.shift();\n        if (path.length > 0) {\n            dst[part] = setProp(dst[part] || {}, path, value);\n        } else {\n            var prevValue = dst[part];\n            if (prevValue)\n                value = [].concat(prevValue).concat(value);\n            dst[part] = value;\n        }\n        return dst;\n    }\n\n    if (typeof dst !== \"object\")\n        throw TypeError(\"dst must be an object\");\n    if (!path)\n        throw TypeError(\"path must be specified\");\n\n    path = path.split(\".\");\n    return setProp(dst, path, value);\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(29))());\n    }\n});\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(39);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo | 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi | 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toBigInt = function() { return 0n; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\nconst TWO_32 = 4294967296n;\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromBigInt = function fromNumber(value) {\n    value = BigInt(value);\n    if (value === 0n)\n        return zero;\n\n    var negative = value < 0;\n    if (negative) {\n        value = -value;\n    }\n    var hi = Number(value >> 32n) | 0;\n    var lo = Number(value - ( BigInt(hi) << 32n ) ) | 0;\n\n    if (negative) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > TWO_32) {\n            lo = 0;\n            if (++hi > TWO_32)\n                hi = 0;\n        }\n    }\n\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\n LongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {bigint|number|string|object} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\") {\n        return LongBits.fromNumber(value);\n    }\n    if (typeof value === \"bigint\") {\n        return LongBits.fromBigInt(value);\n    }\n    if (util.isString(value)) {\n        return LongBits.fromBigInt(BigInt(value));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toBigInt = function toBigInt(unsigned) {\n\n\n    if (unsigned) {\n        const result = BigInt(this.lo >>> 0) + ( BigInt(this.hi >>> 0) << 32n );\n        return result;\n    }\n\n    if (this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(BigInt(lo) + ( BigInt(hi) << 32n ) );\n    }\n\n    return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(1);\n\n// converts to / from base64 encoded strings\nutil.base64 = require(2);\n\n// base class of rpc.Service\nutil.EventEmitter = require(4);\n\n// float handling accross browsers\nutil.float = require(6);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(7);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(10);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(9);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(38);\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = function isInteger(value) {\n    if (typeof value === \"bigint\") return true;\n    return typeof value === \"number\" && (Number.isInteger(value) || isFinite(value) && Math.floor(value) === value);\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(15),\n    util      = require(37);\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|bigint\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|bigint key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}","\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(21);\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n             // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].substr(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ?\n                message.$type.fullName.substr(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(39);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.from(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(42);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(39);\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n"],"sourceRoot":"."}